#version 460
#extension GL_EXT_nonuniform_qualifier : require
#define EPSILON 0.00000095367431640625f // 2 ^ (-20)
#define PI 3.1415926535897932384626433832795f
#define ONE_OVER_PI 1.0f / PI
#define ONE_OVER_TWO_PI 1.0f / (2.0f * PI)
#define UINT_MAX 0xffffffffU
#define INV_UINT_MAX 1.0f / float(UINT_MAX)

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct HitInfo
{
	vec3 point;
	vec3 normal;
	vec2 uv;
	float distance;
	int materialId;
	int triangleId;
	bool frontFace;
};

struct Triangle
{
	vec3 points[3];
	vec3 normals[3];
	vec2 uvs[3];
	int materialId;
};

struct BVHNode
{
	vec3 min;
	vec3 max;
    int leftId;
    int rightId;
	int parentId;
	int nextId;
	int skipId;
	int primitiveId;
};

struct Material
{
	int albedo;
	int normal;
	int roughness;
	int metalness;
	int emission;
	float indexOfRefraction;
};

struct Vertex
{
	vec3 position;
	vec3 normal;
	vec2 uv;
	int materialId;
};

layout(std430, set = 0, binding = 0) readonly buffer Vertexes
{
    Vertex vertexes[];
};

layout(std430, set = 0, binding = 1) readonly buffer Indexes
{
    uint indexes[];
};

layout(std430, set = 0, binding = 2) readonly buffer Materials
{
    Material materials[];
};

layout(std430, set = 0, binding = 3) readonly buffer Nodes
{
    BVHNode nodes[];
};

layout(std430, set = 0, binding = 4) readonly buffer EmissionTriangles
{
    uint emissionTriangles[];
};

layout(set = 1, binding = 0) uniform sampler2D textures[];

layout (rgba32f, set = 2, binding = 0) readonly uniform image2D rayDirections;
layout (rgba32f, set = 3, binding = 0) uniform image2D accumulated;
layout (rgba32f, set = 4, binding = 0) writeonly uniform image2D screenImage;

layout( push_constant ) uniform PushConstants
{
	vec3  backgroundColor;
	vec3  cameraPosition;
	vec3  pixelDeltaU;
	vec3  pixelDeltaV;
	vec2  viewBounds;
	ivec2 imageSize;
	float time;
	float invFrameCount;
	int   frameCount;
	int   maxBouncesCount;
	int   trianglesCount;
	int   emissionTrianglesCount;
	int   rootId;
	int   environmentMapId;
} constants;

uint seed;

float rand();
float rand(vec2 bounds);
float rand(float x, float y);
vec3  rand_in_unit_sphere();
vec3  rand_in_unit_hemisphere(vec3 normal);
vec3  random_cosine_direction();

vec3 calculate_emission_material(HitInfo info, vec3 emission);
vec3 calculate_dielectric_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo, float indexOfRefraction);
vec3 calculate_metallic_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo, float metalness);
vec3 calculate_lambertian_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo);
vec3 calculate_disney_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo, float metalness, float indexOfRefraction);

float smith_ggx(float nDotV, float roughness);
float gtr1(float nDotH, float roughness);
float gtr2(float nDotH, float roughness);
float geometry_function(float nDotV, float nDotL, float vDotH, float roughness);
float fresnel_function(float vDotH, float refractionRatio);

vec2  sample_sphere(vec3 direction);
bool  triangle_intersect(int triangleId, in Ray ray, out HitInfo info);
bool  aabb_intersect(vec3 aabbMin, vec3 aabbMax, Ray ray, out float distance);
void  get_triangle(int triangleId, out Triangle triangle);
vec4  get_color_from_texture(int textureId, vec2 uv);
bool  hit(in Ray ray, out HitInfo info);
vec3  calculate_surface_normal(int triangleId, vec3 faceNormal, vec3 textureNormal);

float get_cosine_pdf(vec3 normal, vec3 direction);
vec3  get_cosine_direction(vec3 normal);

float get_triangle_area(int triangleId);
float get_triangle_pdf(int triangleId, vec3 origin, vec3 direction);
vec3  get_random_in_triangle(int triangleId);

float get_lights_pdf(vec3 origin, vec3 direction);
vec3  get_light_path(vec3 origin);

vec3  get_pdf_direction(vec3 origin, vec3 normal);
float get_pdf_value(vec3 origin, vec3 direction, vec3 normal);

void main()
{
    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= constants.imageSize.x || gid.y >= constants.imageSize.y)
	{
        return;
    }
	seed = (gid.x + gid.y * constants.imageSize.x) * (constants.frameCount + 1);
    vec3 color = vec3(1.0f);
	
	Ray ray;
	ray.origin = constants.cameraPosition;
	const int numberOfSectors = 64;
	const float invNumberOfSectors = 1.0f / float(numberOfSectors);
	ivec2 gridOffset = ivec2(constants.frameCount, int(constants.frameCount * invNumberOfSectors));
	gridOffset = ivec2(mod(gridOffset, numberOfSectors));
	vec2 offset = (vec2(rand(), rand()) + vec2(gridOffset)) * invNumberOfSectors - 0.5f;
	vec3 randomOffset = (offset.x * constants.pixelDeltaU) + (offset.y * constants.pixelDeltaV);
	ray.direction = normalize(imageLoad(rayDirections, gid).xyz + randomOffset);
	
	
	for (int bounce = 0; bounce < constants.maxBouncesCount + 1; ++bounce) 
	{
		if (all(equal(color, vec3(0.0f))))
		{
			break;
		}
		
        HitInfo info;
        if (!hit(ray, info)) 
		{
			vec2 uv = sample_sphere(ray.direction);
			vec3 background = texture(textures[constants.environmentMapId], uv).rgb;
            color *= background;
            break;
		}
		
		Material material  = materials[info.materialId];
		vec3 emission 	   = get_color_from_texture(material.emission, info.uv).rgb;
		
		if (any(greaterThan(emission, vec3(0.0f))))
		{
			color *= calculate_emission_material(info, emission);
            break;
		}
		
		vec3 albedo 	   = get_color_from_texture(material.albedo, info.uv).rgb;
		vec3 textureNormal = get_color_from_texture(material.normal, info.uv).rgb;
		vec3 normal        = calculate_surface_normal(info.triangleId, 
													  info.normal, 
													  textureNormal);
		float metalness = get_color_from_texture(material.metalness, info.uv).b;
		float indexOfRefraction = material.indexOfRefraction;
		//float roughness = get_color_from_texture(material.roughness, info.uv).g;
		
		if (indexOfRefraction != 0.0f)
		{
			color *= calculate_dielectric_material(ray, info, normal, albedo, indexOfRefraction);
			//color *= calculate_disney_material(ray, info, normal, albedo, metalness, indexOfRefraction);
		}
		else if (metalness > 0.0f)
		{
			color *= calculate_metallic_material(ray, info, normal, albedo, metalness);
		} else {
			color *= calculate_lambertian_material(ray, info, normal, albedo);
		}
    }
	
    vec3 currentPixel = imageLoad(accumulated, gid).rgb;
	vec4 result = vec4(currentPixel + color, 1.0f);
    imageStore(accumulated, gid, result);
	result *= constants.invFrameCount;
	imageStore(screenImage, gid, vec4(result.rgb, 1.0f));
}

vec3 calculate_emission_material(HitInfo info, vec3 emission)
{
	if (!info.frontFace)
	{
		return vec3(0.0f);
	} else {
		return emission * 15.0f; // Emission strength is constant
	}
}

vec3 calculate_dielectric_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo, float indexOfRefraction)
{
	float refractionRatio = info.frontFace ? (1.0f / indexOfRefraction) : indexOfRefraction;

	float cosTheta = dot(-ray.direction, normal);
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);

	bool cannotRefract = refractionRatio * sinTheta > 1.0f;

	ray.origin = info.point;
	if (cannotRefract || fresnel_function(cosTheta, refractionRatio) >= rand())
	{
		ray.direction = reflect(ray.direction, normal);
	} else {
		ray.direction = refract(ray.direction, normal, refractionRatio);
	}

	return albedo;
}

vec3 calculate_metallic_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo, float metalness)
{
	ray.origin = info.point;
	vec3 reflectedRay = reflect(ray.direction, normal);
	vec3 randomRay = rand_in_unit_hemisphere(normal);
	ray.direction = normalize(reflectedRay + randomRay * (1.0f - metalness));
	return albedo;
}

vec3 calculate_lambertian_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo)
{
	ray.origin = info.point;
	ray.direction = normalize(get_pdf_direction(ray.origin, normal));
	
	float scatteringPDF = get_cosine_pdf(normal, ray.direction);
	float pdfValue = get_pdf_value(ray.origin, ray.direction, normal);
			
	return (albedo * scatteringPDF) / pdfValue;
}


vec3 calculate_disney_material(inout Ray ray, HitInfo info, vec3 normal, vec3 albedo, float metalness, float indexOfRefraction)
{
	float refractionRatio = info.frontFace ? (1.0f / indexOfRefraction) : indexOfRefraction;
	vec3 l = rand_in_unit_hemisphere(normal);
	vec3 v = -ray.direction;
	float nDotV = dot(normal, v);
	float nDotL  = dot(normal, l);
	
	ray.origin = info.point;
	ray.direction = l;
	if (nDotL < 0.0f || nDotV < 0.0f)
	{
		return vec3(0.0f);
	}
	
	vec3 h = normalize(l + v);
	float nDotH = dot(normal, h);
	float lDotH = dot(l, h);
	float vDotH = dot(v, h);
	
	metalness = 0.0f;
	float spec = 1.0f;
	float specTint = 1.0f;
	float roughness = 1.0f;
	
	float cdlum = 0.3f * albedo.r + 0.6f * albedo.g + 0.1f * albedo.b;
	vec3 ctint = cdlum > 0.0f ? albedo / cdlum : vec3(1.0f);
	vec3 cspec = spec * mix(vec3(1.0f), ctint, specTint);
	vec3 cspec0 = mix(0.08f * cspec, albedo, metalness);
	float fd90 = 0.5f + 2.0f * lDotH * lDotH * roughness;
	float fl = fresnel_function(nDotL, refractionRatio);
	float fv = fresnel_function(nDotV, refractionRatio);
	float fd = mix(1.0f, fd90, fl) * mix(1.0f, fd90, fv);
	
	vec3 diffuse = fd * albedo * ONE_OVER_PI;
	
	float alpha = roughness * roughness;
	float ds = gtr2(nDotH, alpha);
	float fh = fresnel_function(lDotH, refractionRatio);
	vec3 fs = mix(cspec0, vec3(1.0f), fh);
	float gs = smith_ggx(nDotL, roughness);
	gs *= smith_ggx(nDotV, roughness);
	
	vec3 specular = gs * fs * ds;
	
	return diffuse * (1.0f - metalness) + specular;
}

float smith_ggx(float nDotV, float roughness)
{
	float r2 = roughness * roughness;
	float x = nDotV * nDotV;
	
	return 1.0f / (nDotV + sqrt(r2 + x - x * r2));
}

float gtr1(float nDotH, float roughness) 
{
    if (roughness >= 1.0f)
	{
		return ONE_OVER_PI;
	}
    float r2 = roughness * roughness;
    float t = 1.0f + (r2 - 1.0f) * nDotH * nDotH;
    return (r2 - 1.0f) / (PI * log(r2) * t);
}

float gtr2(float nDotH, float roughness)
{
    float r2 = roughness * roughness;
    float t = 1.0f + (r2 - 1.0f) * nDotH * nDotH;
    return r2 / (PI * t * t);
}

float geometry_function(float nDotV, float nDotL, float vDotH, float roughness)
{
	float dividend = 2.0f * nDotL * nDotV;
	float r2 = roughness * roughness;
	float divider = vDotH + sqrt(r2 + (1.0f - r2) * nDotV * nDotV);
	return dividend / divider;
}

float fresnel_function(float vDotH, float refractionRatio)
{ // Calculate probability of reflect or refract light
	// Use Schlick's approximation for reflectance.
	float r0 = (1.0f - refractionRatio) / (1.0f + refractionRatio);
	r0 = r0 * r0;
	return r0 + (1.0f - r0) * pow((1.0f - vDotH), 5.0f);
}

// float from 0 to 1
float rand() 
{
	//Bob Jenkins' One-At-A-Time hashing algorithm
    seed += ( seed << 10u );
    seed ^= ( seed >>  6u );
    seed += ( seed <<  3u );
    seed ^= ( seed >> 11u );
    seed += ( seed << 15u );
    return float(seed) * (INV_UINT_MAX);
}

float rand(vec2 bounds) 
{
    return bounds.x + (bounds.y - bounds.x) * rand();
}

float rand(float x, float y) 
{
    return x + (y - x) * rand();
}

vec3 rand_in_unit_sphere()
{
	vec3 randomVector;
	const vec2 bounds = { -1.0f, 1.0f };
	
	randomVector.x = rand(bounds);
	randomVector.y = rand(bounds);
	randomVector.z = rand(bounds);

	return normalize(randomVector);
}

vec3 rand_in_unit_hemisphere(vec3 normal)
{
	vec3 randomVector = rand_in_unit_sphere();
	return mix(-randomVector, randomVector, float(dot(randomVector, normal) > 0.0f)); //TODO: CHECK THIS !!!
}

vec3 random_cosine_direction()
{
	float r1 = rand();
	float r2 = rand();
	
	float phi = 2.0f * PI * r1;
	vec3 result;
	result.x = cos(phi) * sqrt(r2);
	result.y = sin(phi) * sqrt(r2);
	result.z = sqrt(1.0f - r2);

	return result;
}

vec2 sample_sphere(vec3 direction)
{
	vec2 uv;
	uv.x = 0.5f + (atan(-direction.z, direction.x) * ONE_OVER_TWO_PI);
	uv.y = acos(direction.y) * ONE_OVER_PI;
    return uv;
}

void get_triangle(int triangleId, out Triangle triangle)
{
	Vertex v1 = vertexes[indexes[triangleId + 0]];
	Vertex v2 = vertexes[indexes[triangleId + 1]];
	Vertex v3 = vertexes[indexes[triangleId + 2]];
	
	triangle.materialId = v1.materialId;
	
	triangle.points[0]  = v1.position;
	triangle.points[1]  = v2.position;
	triangle.points[2]  = v3.position;
	
	triangle.normals[0] = v1.normal;
	triangle.normals[1] = v2.normal;
	triangle.normals[2] = v3.normal;
	
	triangle.uvs[0] 	= v1.uv;
	triangle.uvs[1] 	= v2.uv;
	triangle.uvs[2] 	= v3.uv;
}

vec4 get_color_from_texture(int textureId, vec2 uv)
{
	if (textureId == -1)
	{
		return vec4(0.0f, 0.0f, 0.0f, 1.0f);
	}
	return texture(textures[textureId], uv);
}

bool triangle_intersect(int triangleId, in Ray ray, out HitInfo info)
{
	Triangle triangle;
	get_triangle(triangleId, triangle);
    vec3 edge1, edge2, dirXe2;
    float det;
	
    edge1 = triangle.points[1] - triangle.points[0];
    edge2 = triangle.points[2] - triangle.points[0];
	dirXe2 = cross(ray.direction, edge2);
	det = dot(edge1, dirXe2);
	
	if (abs(det) < EPSILON)
    {
		return false;    // This ray is parallel to this triangle.
	}
	
    float invDet = 1.0f / det;
    vec3 s = ray.origin - triangle.points[0];
    float u = invDet * dot(s, dirXe2);

    if (u < 0.0f || u > 1.0f)
	{
		return false;
	}
	
    vec3 sXe1 = cross(s, edge1);
    float v = invDet * dot(ray.direction, sXe1);

    if (v < 0.0f || (u + v) > 1.0f)
	{
		return false;
	}
	
    // At this stage we can compute distance to find out where the intersection point is on the line.
    float d = invDet * dot(edge2, sXe1);

    if (d < constants.viewBounds.x || d > constants.viewBounds.y)
    {
		// This means that there is a line intersection but not a ray intersection.
		return false;
    }
	
	info.materialId = triangle.materialId;
	float w = 1.0f - u - v;
	info.uv = (triangle.uvs[0] * w)
			+ (triangle.uvs[1] * u)
			+ (triangle.uvs[2] * v);
	if (get_color_from_texture(materials[info.materialId].albedo, info.uv).a < 0.2f)
	{
		return false;
	}
	info.distance = d;
	info.point = ray.origin + ray.direction * d;
	info.normal = (triangle.normals[0] * w) 
				+ (triangle.normals[1] * u) 
				+ (triangle.normals[2] * v);
	info.normal = normalize(info.normal);
	info.frontFace = dot(info.normal, ray.direction) < 0.0f;
	if (!info.frontFace)
	{
		info.normal = -info.normal;
	}
	
	info.triangleId = triangleId;
				
	return true;
}

bool aabb_intersect(vec3 aabbMin, vec3 aabbMax, Ray ray, out float distance)
{
	vec3 invDir = vec3(1.0f) / (ray.direction + EPSILON);
	
	vec3 tbot = invDir * (aabbMin - ray.origin);
	vec3 ttop = invDir * (aabbMax - ray.origin);
	vec3 tmin = min(ttop, tbot);
	vec3 tmax = max(ttop, tbot);
	float t0 = max(max(tmin.x, tmin.y), tmin.z);
	float t1 = min(min(tmax.x, tmax.y), tmax.z);
	vec3 d = max(vec3(0.0f), max(aabbMin - ray.origin, ray.origin - aabbMax));
	distance = dot(d, d);//Distance is set even if there is no intersection
	return t1 > max(t0, 0.0f);
}

bool hit(in Ray ray, out HitInfo info)
{
	bool result = false;
	HitInfo tempInfo;
	
	info.distance = constants.viewBounds.y + 1.0f;
	tempInfo.distance = info.distance + 1.0f;
	int nodeId = constants.rootId;
	
	while (nodeId != -1)
	{
		BVHNode node = nodes[nodeId];
		float distanceSquared;
		if (!aabb_intersect(node.min, node.max, ray, distanceSquared) || distanceSquared > info.distance * info.distance)
		{
			nodeId = node.skipId;
			continue;
		}
		
		if (node.primitiveId != -1)
		{ // Node is leaf node and contains triangle
			if (triangle_intersect(node.primitiveId, ray, tempInfo) && tempInfo.distance < info.distance)
			{
				info = tempInfo;
				result = true;
			}
		}
		nodeId = node.nextId;
	}
	
	return result;
}

vec3 calculate_surface_normal(int triangleId, vec3 faceNormal, vec3 textureNormal)
{
	Triangle triangle;
	get_triangle(triangleId, triangle);
	
	vec3 deltaPos1 = triangle.points[1] - triangle.points[0];
	vec3 deltaPos2 = triangle.points[2] - triangle.points[0];
	vec2 deltaUV1  = triangle.uvs[1] - triangle.uvs[0];
	vec2 deltaUV2  = triangle.uvs[2] - triangle.uvs[0];
	
	float denominator = deltaUV1.x * deltaUV2.y - deltaUV1.y * deltaUV2.x;
	if (abs(denominator) <= EPSILON)
	{
		return faceNormal;
	}
	
	float r = 1.0f / denominator;
	
	vec3 tangent   = (deltaPos1 * deltaUV2.y - deltaPos2 * deltaUV1.y) * r;
	vec3 bitangent = (deltaPos2 * deltaUV1.x - deltaPos1 * deltaUV2.x) * r;
	
	vec3 textureInNormalSpace = normalize(textureNormal * 2.0f - 1.0f);

	if (all(equal(textureNormal, vec3(0.0f))))
	{
		return faceNormal;
	}
	
	mat3 TBN = mat3(normalize(tangent), normalize(bitangent), faceNormal);
	vec3 normalInWorldSpace = normalize(TBN * textureInNormalSpace);
	
	return normalInWorldSpace;
}

float get_cosine_pdf(vec3 normal, vec3 direction)
{
	return max(0.0f, dot(normal, direction) * ONE_OVER_PI);
}

vec3 get_cosine_direction(vec3 normal)
{
	vec3 a = (normal.x > 0.9f)
		   ? vec3(0.0f, 1.0f, 0.0f)
		   : vec3(1.0f, 0.0f, 0.0f);
	vec3 v = cross(normal, a);
	vec3 u = cross(normal, v);
	
	vec3 localDirection = random_cosine_direction();
	localDirection = (localDirection.x * u) + (localDirection.y * v) + (localDirection.z * normal);
	return normalize(localDirection);
}

float get_triangle_area(int triangleId)
{
	vec3 a = vertexes[indexes[triangleId + 0]].position;
	vec3 b = vertexes[indexes[triangleId + 1]].position;
	vec3 c = vertexes[indexes[triangleId + 2]].position;
	
	vec3 u = b - a;
	vec3 v = c - a;
	
    return 0.5f * length(cross(u, v));
}

float get_triangle_pdf(int triangleId, vec3 origin, vec3 direction)
{
	HitInfo info;
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	if (!triangle_intersect(triangleId, ray, info))
	{
		return 0.0f; 
	}
	
	float cosine = abs(dot(direction, info.normal));
	return (info.distance * info.distance) / (cosine * get_triangle_area(triangleId));
}

vec3 get_random_in_triangle(int triangleId)
{
	vec3 a = vertexes[indexes[triangleId + 0]].position;
	vec3 b = vertexes[indexes[triangleId + 1]].position;
	vec3 c = vertexes[indexes[triangleId + 2]].position;
	
    float r1 = sqrt(rand());
    float r2 = rand();

    float alpha = 1.0f - r1;
    float beta  = r1 * (1.0f - r2);
    float gamma = r1 * r2;

    vec3 p = (a * alpha) + (b * beta) + (c * gamma);
	
	return p;
}

float get_lights_pdf(vec3 origin, vec3 direction)
{
	float weight = 1.0f / float(constants.emissionTrianglesCount);
	float sum = 0.0f;
	
	for (int emissionId = 0; emissionId < constants.emissionTrianglesCount; ++emissionId)
	{
		int triangleId = int(emissionTriangles[emissionId]);
		sum += get_triangle_pdf(triangleId, origin, direction);
	}
	return weight * sum + EPSILON;
}

vec3 get_light_path(vec3 origin)
{
	int triangleId = int(emissionTriangles[uint(round(rand(0, constants.emissionTrianglesCount - 1)))]);
	
	return get_random_in_triangle(triangleId) - origin;
}

vec3 get_pdf_direction(vec3 origin, vec3 normal)
{
	return rand() > 0.5f ? get_cosine_direction(normal) : get_light_path(origin);
}

float get_pdf_value(vec3 origin, vec3 direction, vec3 normal)
{
	return (get_lights_pdf(origin, direction) + get_cosine_pdf(normal, direction)) * 0.5f;
}